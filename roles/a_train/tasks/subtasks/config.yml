#########################################################################
# Title:            Sandbox: A-Train                                    #
# Author(s):        hackmonker                                          #
# URL:              https://github.com/saltyorg/Sandbox                 #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Get remote types from rclone config
  ansible.builtin.shell: "echo {{ lookup('ini', 'type', section=item, file=lookup('role_var', '_paths_rclone_config_location', role='a_train')) }}"
  with_items: "{{ a_train.remotes }}"
  register: remote_type

- name: Set variable for remote types along with empty default variables
  ansible.builtin.set_fact:
    remote_type_var: "{{ remote_type.results | map(attribute='stdout') }}"
    drive_id: []
    union_id: []
    td_id_var: []

- name: Fail if remote type is crypt
  ansible.builtin.fail:
    msg: "A-Train does not support crypt remotes."
  when: remote_type_var is search("crypt")

- name: Get the ID of teamdrives if remote type is drive
  when: remote_type_var is search("drive")
  block:
    - name: Set variable for remote names
      ansible.builtin.set_fact:
        drive_remotes: "{{ remote_type.results | selectattr('stdout', '==', 'drive') | map(attribute='item') }}"

    - name: Get the ID of the teamdrives
      ansible.builtin.shell: "echo {{ lookup('ini', 'team_drive', section=item, file=lookup('role_var', '_paths_rclone_config_location', role='a_train')) }}"
      register: drive_id_var
      loop: "{{ drive_remotes }}"

    - name: Set variable for ID of teamdrives
      ansible.builtin.set_fact:
        drive_id: "{{ drive_id_var.results | map(attribute='stdout') }}"

- name: Get the ID of teamdrives if remote type is union
  when: remote_type_var is search("union")
  block:
    - name: Set variable for remote names
      ansible.builtin.set_fact:
        union_remotes: "{{ remote_type.results | selectattr('stdout', '==', 'union') | map(attribute='item') }}"

    - name: Get the upstreams
      ansible.builtin.shell: "echo {{ lookup('ini', 'upstreams', section=item, file=lookup('role_var', '_paths_rclone_config_location', role='a_train')) }}"
      with_items: "{{ union_remotes }}"
      register: union_upstreams_var

    - name: Set variable for upstreams
      ansible.builtin.set_fact:
        union_upstreams: "{{ union_upstreams_var.results[0].stdout.split(separator) | map('replace', ':', '') }}"
      vars:
        separator: ': '
      when: '": " in union_upstreams_var.results[0].stdout'

    - name: Set variable for upstreams when root folder is specified
      ansible.builtin.set_fact:
        union_upstreams: "{{ union_upstreams_var.results[0].stdout.split(separator) | map('replace', ':', '') | map('replace', secret_slash, '') }}"
      vars:
        separator: '/ '
        secret_slash: '/'
      when: '"/" in union_upstreams_var.results[0].stdout'

    - name: Get the ID of the teamdrives
      ansible.builtin.shell: "echo {{ lookup('ini', 'team_drive', section=item, file=lookup('role_var', '_paths_rclone_config_location', role='a_train')) }}"
      register: union_id_var
      loop: "{{ union_upstreams }}"

    - name: Set variable for ID of teamdrives
      ansible.builtin.set_fact:
        union_id: "{{ union_id_var.results | map(attribute='stdout') }}"

- name: Merge teamdrive ID of both union and drive remotes
  ansible.builtin.set_fact:
    td_id_var: "{{ drive_id + union_id }}"

- name: Set variable for merged ID of teamdrives
  ansible.builtin.set_fact:
    td_id: "{{ td_id_var | unique | join('\", \"') }}"
